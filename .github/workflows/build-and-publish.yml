name: Build & Publish

on: [push, pull_request]

env:
  PKG_NAME: icloud-photos-sync
  NODE_VERSION: 18

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup node
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Build
      run: |
        npm run clean && \
        npm install && \
        npm run build && \
        npm run docs
      working-directory: rootfs/opt/icloud-photos-sync/
    - name: Test
      run: |
        npm run test-coverage
      env:
        APPLE_ID_USER: ${{ secrets.TEST_APPLE_ID_USER }}
        APPLE_ID_PWD: ${{ secrets.TEST_APPLE_ID_PWD }}
        TRUST_TOKEN: ${{ secrets.TEST_TRUST_TOKEN }}
      working-directory: rootfs/opt/icloud-photos-sync/
    - name: Package npm artifacts
      run: |
        cp README.md LICENSE rootfs/opt/icloud-photos-sync/ && \
        tar -C rootfs/opt/icloud-photos-sync/ -czf ./npm.tar.gz README.md LICENSE package.json bin/
    - name: Upload npm artifacts
      uses: actions/upload-artifact@v2
      with:
        name: npm-artifacts
        path: ./npm.tar.gz
    - name: Package docker artifacts
      run: tar -C ./rootfs -czf ./rootfs.tar.gz ./
    - name: Upload docker artifacts
      uses: actions/upload-artifact@v2
      with:
        name: rootfs
        path: ./rootfs.tar.gz
    - name: Package docs
      run: tar -C rootfs/opt/icloud-photos-sync/ -czf ./docs.tar.gz docs/
    - name: Upload docs artifacts
      uses: actions/upload-artifact@v2
      with:
        name: docs-artifacts
        path: ./docs.tar.gz
  
  publish-docker-dev:
    name: Publish Project to steilerGroup-Docker
    needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: rootfs
    - name: Login to Docker Registry
      run: docker login ${{secrets.DOCKER_DEV_HOST}} -u ${{secrets.DOCKER_DEV_USERNAME}} -p ${{secrets.DOCKER_DEV_PWD}}
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{secrets.DOCKER_DEV_HOST}}/$PKG_NAME:latest
    - name: Push the Docker image
      run: docker push ${{secrets.DOCKER_DEV_HOST}}/$PKG_NAME:latest

  publish-dockerhub:
    name: Publish Project to Docker
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: rootfs
    - name: Login to DockerHub
      run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PWD}}
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag $PKG_NAME
    - name: Get current version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@master
      with:
        path: rootfs/opt/icloud-photos-sync
    - name: Tag the Docker image
      run: |
        docker image tag $PKG_NAME ${{secrets.DOCKER_USERNAME}}/$PKG_NAME:latest && \
        docker image tag $PKG_NAME ${{secrets.DOCKER_USERNAME}}/$PKG_NAME:${{ steps.package-version.outputs.current-version}} && \
        docker image ls
    - name: Push to DockerHub
      run: docker image push --all-tags ${{secrets.DOCKER_USERNAME}}/$PKG_NAME
    - name: Update DockerHub readme
      uses: peter-evans/dockerhub-description@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PWD }}
        repository: ${{secrets.DOCKER_USERNAME}}/${{env.PKG_NAME}}
        readme-filepath: ./README.md

  publish-npm:
    name: Publish Project to npm
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: npm-artifacts
    - name: Prepare artifacts
      run: |
        tar -xzf npm.tar.gz && \
        rm npm.tar.gz && \
        npm install
    - uses: JS-DevTools/npm-publish@v1
      with:
        token: ${{ secrets.NPM_TOKEN }}
  
  publish-wiki:
    name: Publish documentation to GitHub publish-wiki
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: docs-artifacts
      - name: Prepare artifacts
        run: tar -xzf docs.tar.gz
      - name: Upload Documentation to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "docs"
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
