name: Build, Test & Scan
# This reusable workflow will test, build and scan the application. All build assets will be packaged and uploaded
# This action is also run, in order to validate, that Pull Requests are functional
# When this workflow is triggered due to a push to dev, testing & code scanning will be skipped/fast tracked
#
# Creates the following artifacts:
#  - docker-artifacts (Docker RootFS + Dockerfile)
#  - app-artifacts (NPM Upload)
#  - doc-artifacts (Documentation for GH Wiki)
#  - docs-pages-artifacts (Documentation and webpage for GH Pages)
#  - changelog (File containing changelog description)

on:
  workflow_call:
  pull_request:
  push:
    branches:
      - '!main'
      - '!dev'

jobs:
  build-app:
    name: Build App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{secrets.NODE_VERSION}}
          cache: 'npm'
          cache-dependency-path: app/
      - name: Build app artifacts
        run: |
          npm ci
          npm run build
          cp ../README.md ../CHANGELOG.md ../LICENSE ./
        working-directory: app/
      - name: Upload app artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-artifacts
          path: |
            ./app/README.md
            ./app/CHANGELOG.md
            ./app/LICENSE
            ./app/package.json
            ./app/bin/

  build-typedoc:
    name: Build TypeDoc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{secrets.NODE_VERSION}}
          cache: 'npm'
          cache-dependency-path: app/
      - name: Install
        run: npm ci
        working-directory: app/
      - name: Build doc artifacts
        run: npm run doc
        working-directory: app/
      - name: Upload doc artifacts
        uses: actions/upload-artifact@v3
        with:
          name: doc-artifacts
          path: |
            ./app/README.md
            ./app/CHANGELOG.md
            ./app/LICENSE
            ./app/doc/
  
  build-docs-site:
    name: Build Docs Pages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: pages/
      - name: Setup build environment
        run: |
          pip install -r pages/requirements.txt
          cp README.md pages/docs/index.md
      - name: Build Pages
        run: mkdocs build
        working-directory: pages/
      - name: Upload docs pages artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docs-pages-artifacts
          path: ./pages/site/

  build-changelog:
    name: Build Changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build changelog artifacts
        run: |
          START_LINE=$(grep -n -m 1 -E '^##' CHANGELOG.md | grep -Eo '^[0-9]+')
          ((START_LINE++))
          END_LINE=$(grep -n -m 2 -E '^##' CHANGELOG.md | tail -n 1 | grep -Eo '^[0-9]+')
          LENGTH=$(( END_LINE - START_LINE ))
          tail -n +$START_LINE CHANGELOG.md | head -n $LENGTH > CHANGELOG.latest.md
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: ./CHANGELOG.latest.md

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download app artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-artifacts
          path: ./docker/rootfs/opt/icloud-photos-sync
      - name: Build docker rootfs
        run: |
          # Packaging assets
          tar -C ./rootfs -czf ./rootfs.tar.gz ./
        working-directory: docker/
      - name: Build docker image
        run: |
          docker build ./docker --tag ${{ github.event.repository.name }}
          docker save ${{ github.event.repository.name }} | gzip > ./docker-image.tar.gz
      - name: Upload docker artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifacts
          path: |
            ./README.md
            ./CHANGELOG.md
            ./LICENSE
            ./docker-image.tar.gz
        
  test-app:
    name: Test App
    strategy:
      matrix:
        os: ${{ fromJSON(github.ref == 'refs/heads/dev' && '["ubuntu-latest"]' || '["ubuntu-latest", "macos-latest"]') }} # Skipping macOS on 'dev' branch, due to slow performance
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{secrets.NODE_VERSION}}
          cache: 'npm'
          cache-dependency-path: app/
      - name: Install
        run: npm install
        working-directory: app/
      - name: Test
        run: npm run test
        env:
          NODE_OPTIONS: --experimental-vm-modules # Needed for JEST / ESM compatibility
        working-directory: app/

  test-docker:
    name: Test Docker Image
    needs: build-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download 
        uses: actions/download-artifact@v3
        with:
          name: docker-artifacts
          path: docker-image
      - name: Install
        run: docker load --input ./docker-image/docker-image.tar.gz
      - name: Prepare tests
        run: chmod +x ./docker/test/*
      - name: Test Image
        run: run-parts -v --exit-on-error ./docker/test

  scan:
    name: Perform Code Scan
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/dev' # Skip this on dev branch
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2