name: Build, Test & Scan
# This reusable workflow will test, build and scan the application. All build assets will be packaged and uploaded
# This action is also run, in order to validate, that Pull Requests are functional
#
# Creates the following artifacts:
#  - docker-artifacts (Docker RootFS + Dockerfile)
#  - npm-artifacts (NPM Upload)
#  - doc-artifacts (Documentation for GH Wiki)
#  - changelog (File containing changelog description)

on:
  workflow_call:
  pull_request:
  push:
    branches:
      - '!main'
      - '!dev'

env:
  NODE_VERSION: 18

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Prepare environment
        run: |
          npm run clean
          npm install
        working-directory: rootfs/opt/icloud-photos-sync/
      - name: Build app
        run: |
          npm run build
          cp ../../../README.md ../../../CHANGELOG.md ../../../LICENSE ./
        working-directory: rootfs/opt/icloud-photos-sync/
      - name: Build doc artifacts
        run: npm run docs
        working-directory: rootfs/opt/icloud-photos-sync/
      - name: Build docker artifacts
        run: tar -C ./rootfs -czf ./rootfs.tar.gz ./
      - name: Build changelog artifact
        run: |
          START_LINE=$(grep -n -m 1 -E '^##' CHANGELOG.md | grep -Eo '^[0-9]+')
          ((START_LINE++))
          END_LINE=$(grep -n -m 2 -E '^##' CHANGELOG.md | tail -n 1 | grep -Eo '^[0-9]+')
          LENGTH=$(( END_LINE - START_LINE ))
          tail -n +$START_LINE CHANGELOG.md | head -n $LENGTH > CHANGELOG.latest.md
      - name: Upload npm artifacts
        uses: actions/upload-artifact@v3
        with:
          name: npm-artifacts
          path: |
            ./rootfs/opt/icloud-photos-sync/README.md
            ./rootfs/opt/icloud-photos-sync/CHANGELOG.md
            ./rootfs/opt/icloud-photos-sync/LICENSE
            ./rootfs/opt/icloud-photos-sync/package.json
            ./rootfs/opt/icloud-photos-sync/bin/
      - name: Upload docker artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifacts
          path: |
            ./rootfs.tar.gz
            ./Dockerfile
            ./README.md
      - name: Upload doc artifacts
        uses: actions/upload-artifact@v3
        with:
          name: doc-artifacts
          path: ./rootfs/opt/icloud-photos-sync/docs
      - name: Upload changelog artifact
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: ./CHANGELOG.latest.md

  test:
    name: Test Project
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    if: github.ref != 'refs/heads/dev' || matrix.os == 'ubuntu-latest'
    env:
      NODE_OPTIONS: --experimental-vm-modules
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Clean
        run: npm run clean
        working-directory: rootfs/opt/icloud-photos-sync/
      - name: Install
        run: npm install
        working-directory: rootfs/opt/icloud-photos-sync/
      - name: Test
        run: npm run test
        working-directory: rootfs/opt/icloud-photos-sync/

  scan:
    name: Perform Code Scan
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/dev'
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2