on: workflow_dispatch
# on:
#   pull_request_target:
#     branches:
#       - main
#     types: [opened]
name: Acceptance Tests
jobs:
  acceptanceTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh
          rm get_helm.sh
      - name: Install Terraform CLI
        run: |
          wget -q -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update
          sudo apt-get install -y terraform
      - name: Install GoReleaser
        run: |
          echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
          sudo apt-get update
          sudo apt-get install -y goreleaser
      - name: Create Artifactory data directories and copy data
        run: |
          mkdir -p ${{ github.workspace }}/scripts/artifactory/extra_conf
          mkdir -p ${{ github.workspace }}/scripts/artifactory/var/etc
          export ARTIFACTORY_LICENSE=${{ secrets.ARTIFACTORY_LICENSE }}
          echo $ARTIFACTORY_LICENSE > ${{ github.workspace }}/scripts/artifactory/extra_conf/artifactory.lic
          cp ${{ github.workspace }}/scripts/system.yaml ${{ github.workspace }}/scripts/artifactory/var/etc/system.yaml
          sudo chown -R 1030:1030 ${{ github.workspace }}/scripts/artifactory/var
      - name: Run Artifactory container and execute acceptance tests
        run: |
          echo "Get latest Artifactory image tag"
          helm repo add artifactory https://charts.jfrog.io
          helm repo update
          ARTIFACTORY_VERSION=$(helm search repo | grep "artifactory " | awk '{$1=$1};1' |  cut -f3 -d " ")
          echo "Start up Artifactory container"
          docker run -i --name artifactory -d --rm \
            -v ${{ github.workspace }}/scripts/artifactory/extra_conf:/artifactory_extra_conf \
            -v ${{ github.workspace }}/scripts/artifactory/var:/var/opt/jfrog/artifactory \
            -p 8081:8081 -p 8082:8082 \
            releases-docker.jfrog.io/jfrog/artifactory-pro:${ARTIFACTORY_VERSION}
          echo "Set localhost to a container IP address, since we run docker inside of docker"
          export LOCALHOST=$(docker inspect -f '{{`{{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}`}}' artifactory)
          export JFROG_URL="http://${LOCALHOST}:8082"
          echo "Waiting for Artifactory services to start"
          until $(curl -sf -m 5 ${JFROG_URL}/artifactory/api/system/ping/); do
            printf '.'
            sleep 5
          done
          echo "Waiting for Artifactory UI to start"
          until $(curl -sf -m 5 ${JFROG_URL}/ui/login/); do
            printf '.'
            sleep 5
          done
          export COOKIES=$(curl -c - "${JFROG_URL}/ui/api/v1/ui/auth/login?_spring_security_remember_me=false" \
            --header "accept: application/json, text/plain, */*" \
            --header "content-type: application/json;charset=UTF-8" \
            --header "x-requested-with: XMLHttpRequest" \
            -d '{"user":"admin","password":"'"${{ secrets.ARTIFACTORY_PASSWORD }}"'","type":"login"}' | grep FALSE)
          export REFRESHTOKEN=$(echo $COOKIES | grep REFRESHTOKEN | awk '{print $7}')
          export ACCESSTOKEN=$(echo $COOKIES | grep ACCESSTOKEN | awk '{print $14}')
          export JFROG_ACCESS_TOKEN=$(curl -g --request GET "${JFROG_URL}/ui/api/v1/system/security/token?services[]=all" \
            --header "accept: application/json, text/plain, */*" \
            --header "x-requested-with: XMLHttpRequest" \
            --header "cookie: ACCESSTOKEN=${ACCESSTOKEN}; REFRESHTOKEN=${REFRESHTOKEN}")
      - name: Execute acceptance tests
        run: TF_ACC=true make acceptance >> $GITHUB_ENV
      - name: Install provider
        run: |
          export PROVIDER_VERSION=$(git describe --tags --abbrev=0 | sed  -n 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1.\2.\3/p')
          cat sample.tf | sed -e "s/version =.*/version = \"${PROVIDER_VERSION}\"/g" > sample.tf.tmp
          cp sample.tf.tmp sample.tf && rm sample.tf.tmp
          make install
      - name: Clean up Docker container
        run: docker stop artifactory
      - name: Dump Artifactory logs
        uses: jwalton/gh-docker-logs@v2
        if: always()
        with:
          images: 'artifactory'
          tail: '10000'
