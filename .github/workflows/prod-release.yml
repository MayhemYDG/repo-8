name: Production Release
# A manually triggered workflow to create a new release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version string for release'
        default: 'v1.0.0'
        required: true
        type: string
      pre-release:
        description: 'Flags release as pre-release'
        default: true
        required: true
        type: boolean

env:
  PKG_NAME: 'icloud-photos-sync'
  NODE_VERSION: 18

jobs:
  version-bump:
    name: Repository version bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Version bump # Changing version in CHANGELOG.md / package.json /src/lib/package.ts
        run: |
          NUMERIC_VERSION=${VERSION:1}
          sed -i '/^## Nightly Changes/c\<!-- ## Nightly Changes-->\n\n## '${VERSION} CHANGELOG.md
          sed -ri 's/"version": "[0-9]+\.[0-9]+\.[0-9]+"/"version": "'${NUMERIC_VERSION}'"/' rootfs/opt/icloud-photos-sync/package.json
          sed -ri 's/VERSION = "[0-9]+\.[0-9]+\.[0-9]+"/VERSION = "'${NUMERIC_VERSION}'"/' rootfs/opt/icloud-photos-sync/src/lib/package.ts
        env:
          VERSION: ${{ github.event.inputs.version }}
      - name: Commit & Tag
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Version bump to ${{ inputs.version }}
          commit_user_name: steilerDev
          commit_user_email: frank@steilerdev.de
          tagging_message: ${{ inputs.version }}

  build-workflow:
    name: Build & Test
    needs: version-bump
    uses: ./.github/workflows/build.yml

  publish-dockerhub:
    name: Publish Docker Image
    needs: build-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: docker-artifacts
      - name: Login to DockerHub
        run: docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PWD}}
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag $PKG_NAME
      - name: Tag the Docker image
        run: |
          docker image tag $PKG_NAME ${{secrets.DOCKER_USERNAME}}/$PKG_NAME:latest && \
          docker image tag $PKG_NAME ${{secrets.DOCKER_USERNAME}}/$PKG_NAME:${{ github.event.inputs.version }} && \
          docker image ls
      - name: Push to DockerHub
        run: docker image push --all-tags ${{secrets.DOCKER_USERNAME}}/$PKG_NAME
      - name: Update DockerHub readme
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PWD }}
          repository: ${{secrets.DOCKER_USERNAME}}/${{env.PKG_NAME}}
          readme-filepath: ./README.md

  publish-npm:
    name: Publish npm
    needs: build-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: npm-artifacts
      - name: Prepare artifacts
        run: |
          tar -xzf npm.tar.gz && \
          rm npm.tar.gz && \
          npm install
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
  
  publish-wiki:
    name: Publish GitHub Wiki
    needs: build-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: docs-artifacts
      - name: Prepare artifacts
        run: tar -xzf docs.tar.gz
      - name: Upload Documentation to Wiki
        uses: SwiftDocOrg/github-wiki-publish-action@v1
        with:
          path: "docs"
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  create-gh-release:
    name: Create GH Release
    needs: build-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: changelog
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: "CHANGELOG.latest.md"
          token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          tag: ${{ inputs.version }}
          prerelease: ${{ inputs.pre-release }}